# Production Testing Docker Compose
# Uses pre-built images from Docker Hub and connects to external PostgreSQL
# Images: joshzacharytan/generation-capstone-*:latest

version: '3.8'

services:
  # FastAPI Backend
  backend:
    image: joshzacharytan/generation-capstone-backend:after-theme
    container_name: ecommerce_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=production
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN}
    volumes:
      - ./uploads:/app/static/uploads
      - ./logs:/app/logs
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend with NGINX
  frontend:
    image: joshzacharytan/generation-capstone-frontend:after-theme
    container_name: ecommerce_frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  uploads:
    driver: local
  logs:
    driver: local

networks:
  ecommerce_network:
    driver: bridge