# Frontend Web Application Deployment
# DEPLOYMENT CONFIGURATION DIFFERENCES:
#
# LOCAL DEVELOPMENT:
# - Service type: ClusterIP (default)
# - Access via: kubectl port-forward service/frontend 80:80
# - Ingress host: localhost
# - No external load balancer needed
#
# EXTERNAL URL DEPLOYMENT:
# - Service type: ClusterIP (with ingress) OR NodePort (direct access)
# - Access via: domain name through ingress controller
# - Ingress host: gen-capstone.tanfamily.cc (your actual domain)
# - Requires ingress controller (nginx-ingress, traefik, etc.)
# - Requires DNS configuration
# - Optional: Add TLS/SSL certificates for HTTPS

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: ecommerce-platform
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: joshzacharytan/generation-capstone-frontend:before-theme
        ports:
        - containerPort: 80
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: ecommerce-platform
spec:
  # LOCAL DEVELOPMENT: ClusterIP (default) - requires port forwarding
  # EXTERNAL DEPLOYMENT OPTIONS:
  # Option 1: ClusterIP (with ingress) - recommended for production
  # Option 2: NodePort - direct external access without ingress
  #   type: NodePort
  #   ports:
  #   - port: 80
  #     targetPort: 80
  #     nodePort: 30080  # External access via <cluster-ip>:30080
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ecommerce-ingress
  namespace: ecommerce-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    # EXTERNAL DEPLOYMENT: Add these annotations for production:
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"  # For automatic SSL
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"    # Force HTTPS
spec:
  # TLS/SSL Configuration (uncomment for HTTPS):
  # tls:
  # - hosts:
  #   - gen-capstone.tanfamily.cc
  #   secretName: ecommerce-tls
  rules:
  - host: localhost  # CHANGE TO: gen-capstone.tanfamily.cc for external deployment
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80

# DEPLOYMENT SWITCHING CHECKLIST:
# 
# TO SWITCH FROM LOCAL TO EXTERNAL DEPLOYMENT:
# 1. Backend: Change FRONTEND_DOMAIN from "localhost" to "gen-capstone.tanfamily.cc"
# 2. Frontend: Change ingress host from "localhost" to "gen-capstone.tanfamily.cc"
# 3. Install ingress controller: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml
# 4. Configure DNS: Point gen-capstone.tanfamily.cc to cluster external IP
# 5. Optional: Remove single worker override in backend for better performance
# 6. Optional: Add TLS/SSL configuration for HTTPS
#
# TO SWITCH FROM EXTERNAL TO LOCAL DEVELOPMENT:
# 1. Backend: Change FRONTEND_DOMAIN from "gen-capstone.tanfamily.cc" to "localhost"
# 2. Frontend: Change ingress host from "gen-capstone.tanfamily.cc" to "localhost"
# 3. Use port forwarding: kubectl port-forward service/frontend 80:80 -n ecommerce-platform
# 4. Use port forwarding: kubectl port-forward service/backend 8000:8000 -n ecommerce-platform
# 5. Access via: http://localhost:80