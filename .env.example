# Environment Configuration
# Copy this file to .env and modify the values below for your setup

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# Choose ONE of the following based on your setup:

# Option 1: Local development (PostgreSQL running on your machine)
DATABASE_URL=postgresql://postgres:password@localhost/ecommerce_db

# Option 2: Docker/VM testing (PostgreSQL on host, containers need host access)
# DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/ecommerce_db

# Option 3: External database server
# DATABASE_URL=postgresql://username:password@your-db-server:5432/ecommerce_db

# =============================================================================
# DOMAIN CONFIGURATION
# =============================================================================
# Set this based on how you're accessing the application:

# Local development
FRONTEND_DOMAIN=localhost

# Production or custom domain testing
# FRONTEND_DOMAIN=your-domain.com
# FRONTEND_DOMAIN=gen-capstone.tanfamily.cc

# Ubuntu VM with IP address
# FRONTEND_DOMAIN=192.168.1.100

# =============================================================================
# REQUIRED SECRETS
# =============================================================================
# Generate a secure secret key (minimum 32 characters)
SECRET_KEY=your-super-secret-key-change-this-in-production

# Get your API key from Google AI Studio: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your-gemini-api-key-here

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================
# JWT settings (usually don't need to change)
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Environment type (development, staging, production)
ENVIRONMENT=development

# =============================================================================
# QUICK SETUP GUIDE
# =============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Create database: createdb ecommerce_db
# 3. Update DATABASE_URL with your PostgreSQL credentials
# 4. Set FRONTEND_DOMAIN to your access method (localhost, domain, or IP)
# 5. Generate a secure SECRET_KEY
# 6. Add your GEMINI_API_KEY for AI features
# 7. Run: docker-compose up -d (or follow manual setup in README)

# =============================================================================
# COMMON CONFIGURATIONS
# =============================================================================
# Local development:
#   DATABASE_URL=postgresql://postgres:password@localhost/ecommerce_db
#   FRONTEND_DOMAIN=localhost
#
# Docker testing:
#   DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/ecommerce_db
#   FRONTEND_DOMAIN=localhost
#
# Production testing:
#   DATABASE_URL=postgresql://postgres:password@host.docker.internal:5432/ecommerce_db
#   FRONTEND_DOMAIN=your-domain.com
