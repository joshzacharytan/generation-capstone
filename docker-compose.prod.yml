version: '3.8'

services:
  # FastAPI Backend (Containerized)
  backend:
    image: ghcr.io/joshzacharytan/generation-capstone-backend:latest
    container_name: ecommerce_backend_prod
    restart: always
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - ENVIRONMENT=production
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN:-gen-capstone.tanfamily.cc}
    volumes:
      - ./app/static/uploads:/app/static/uploads  # Persist uploaded files
      - ./logs:/app/logs  # Persist application logs
    networks:
      - backend_network
      - frontend_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # React Frontend with NGINX (Containerized)
  frontend:
    image: ghcr.io/joshzacharytan/generation-capstone-frontend:latest
    container_name: ecommerce_frontend_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"  # For SSL termination
    environment:
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN:-gen-capstone.tanfamily.cc}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

# Persistent volumes for data and logs
volumes:
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge