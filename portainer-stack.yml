version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ecommerce_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend (using pre-built image or build from source)
  backend:
    # Option A: Use your local built image (if available)
    # image: generation-capstone-backend:test
    
    # Option B: Build from your repository
    build:
      context: https://github.com/YOUR_USERNAME/generation_capstone.git
      dockerfile: docker/Dockerfile.backend
    
    container_name: ecommerce_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@db:5432/ecommerce_db
      - SECRET_KEY=your-super-secret-jwt-key-for-testing-12345
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=development
    volumes:
      # Mount for uploaded files (optional for testing)
      - backend_uploads:/app/static/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/docs')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend with Nginx
  frontend:
    # Option A: Use your local built image (if available)
    # image: generation-capstone-frontend:test
    
    # Option B: Build from your repository  
    build:
      context: https://github.com/YOUR_USERNAME/generation_capstone.git
      dockerfile: docker/Dockerfile.frontend
    
    container_name: ecommerce_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  ecommerce_network:
    driver: bridge